
package com.xstv.launcher.provider.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table SCREEN_INFO.
 */
public class ScreenInfoDao extends AbstractDao<ScreenInfo, Long> {

    public static final String TABLENAME = "SCREEN_INFO";

    /**
     * Properties of entity ScreenInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tag = new Property(1, String.class, "tag", false, "TAG");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Local = new Property(3, Boolean.class, "local", false, "LOCAL");
        public final static Property Sortable = new Property(4, Boolean.class, "sortable", false, "SORTABLE");
        public final static Property Removable = new Property(5, Boolean.class, "removable", false, "REMOVABLE");
        public final static Property PluginUrl = new Property(6, String.class, "pluginUrl", false, "PLUGIN_URL");
        public final static Property PluginId = new Property(7, Integer.class, "pluginId", false, "PLUGIN_ID");
        public final static Property PluginPath = new Property(8, String.class, "pluginPath", false, "PLUGIN_PATH");
        public final static Property PluginType = new Property(9, String.class, "pluginType", false, "PLUGIN_TYPE");
        public final static Property PluginSize = new Property(10, String.class, "pluginSize", false, "PLUGIN_SIZE");
        public final static Property PluginState = new Property(11, String.class, "pluginState", false, "PLUGIN_STATE");
        public final static Property UpdateType = new Property(12, String.class, "updateType", false, "UPDATE_TYPE");
        public final static Property VersionName = new Property(13, String.class, "versionName", false, "VERSION_NAME");
        public final static Property ScreenOrder = new Property(14, Integer.class, "screenOrder", false, "SCREEN_ORDER");
        public final static Property ScreenTag = new Property(15, String.class, "screenTag", false, "SCREEN_TAG");
        public final static Property DependModel = new Property(16, String.class, "dependModel", false, "DEPEND_MODEL");
        public final static Property VersionCode = new Property(17, String.class, "versionCode", false, "VERSION_CODE");
        public final static Property FileName = new Property(18, String.class, "fileName", false, "FILE_NAME");
        public final static Property PackageName = new Property(19, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property TabName = new Property(20, String.class, "tabName", false, "TAB_NAME");
        public final static Property BaseVersion = new Property(21, String.class, "baseVersion", false, "BASE_VERSION");
        public final static Property UpdateVersionCode = new Property(22, String.class, "updateVersionCode", false, "UPDATE_VERSION");
        public final static Property ShowOnTab = new Property(23, Boolean.class, "showOnTab", false, "SHOW_ON_TAB");
        public final static Property FileSize = new Property(24, String.class, "fileSize", false, "FILE_SIZE");
        public final static Property Md5 = new Property(25, String.class, "md5", false, "MD5");
        public final static Property TagType = new Property(26, String.class, "tagType", false, "TAG_TYPE");
        public final static Property Describe = new Property(27, String.class, "describe", false, "DESCRIBE");
        public final static Property IconUrl = new Property(28, String.class, "iconUrl", false, "ICON_URL");
        public final static Property ImageUrl = new Property(29, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property UpdateInfo = new Property(30, String.class, "updateInfo", false, "UPDATE_INFO");
        public final static Property Locked = new Property(31, Boolean.class, "locked", false, "LOCKED");
        public final static Property IsNew = new Property(32, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property Hot = new Property(33, Integer.class, "hot", false, "HOT");
        public final static Property NotSupport = new Property(34, String.class, "notSupport", false, "NOT_SUPPORT");
        public final static Property Mark1 = new Property(35, String.class, "mark1", false, "MARK1");
        public final static Property Mark2 = new Property(36, String.class, "mark2", false, "MARK2");
        public final static Property Mark3 = new Property(37, String.class, "mark3", false, "MARK3");
        public final static Property Mark4 = new Property(38, String.class, "mark4", false, "MARK4");
        public final static Property Position = new Property(39, Integer.class, "position", false, "POSITION");
        public final static Property HasUsed = new Property(40, Boolean.class, "hasUsed", false, "HAS_USED");
        public final static Property OfflineShot = new Property(41, String.class, "offlineShot", false, "OFFLINE_SHOT");
    }

    public ScreenInfoDao(DaoConfig config) {
        super(config);
    }

    public ScreenInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        if (!ifNotExists) {
            db.execSQL("CREATE TABLE " + constraint + " SCREEN_INFO (" + //
                    "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                    "'TAG' TEXT," + // 1: tag
                    "'NAME' TEXT," + // 2: name
                    "'LOCAL' INTEGER," + // 3: local
                    "'SORTABLE' INTEGER," + // 4: sortable
                    "'REMOVABLE' INTEGER," + // 5: removable
                    "'PLUGIN_URL' TEXT," + // 6: pluginUrl
                    "'PLUGIN_ID' INTEGER," + // 7: pluginId
                    "'PLUGIN_PATH' TEXT," + // 8: pluginPath
                    "'PLUGIN_TYPE' TEXT," + // 9: pluginType
                    "'PLUGIN_SIZE' TEXT," + // 10: pluginSize
                    "'PLUGIN_STATE' TEXT DEFAULT available," + // 11: pluginState
                    "'UPDATE_TYPE' TEXT," + // 12: updateType
                    "'VERSION_NAME' TEXT," + // 13: versionName
                    "'SCREEN_ORDER' INTEGER," + // 14: screenOrder
                    "'SCREEN_TAG' TEXT," + // 15: screenTag
                    "'DEPEND_MODEL' TEXT," + // 16: dependModel
                    "'VERSION_CODE' TEXT," + // 17: versionCode
                    "'FILE_NAME' TEXT," + // 18: fileName
                    "'PACKAGE_NAME' TEXT," + // 19: packageName
                    "'TAB_NAME' TEXT," + // 20: tabName
                    "'BASE_VERSION' TEXT," + // 21: baseVersion
                    "'UPDATE_VERSION' TEXT," + // 22: updateVersionCode
                    "'SHOW_ON_TAB' INTEGER," + // 23: showOnTab
                    "'FILE_SIZE' TEXT," + // 24: fileSize
                    "'MD5' TEXT," + // 25: md5
                    "'TAG_TYPE' TEXT," + // 26: tagType
                    "'DESCRIBE' TEXT," + // 27: describe
                    "'ICON_URL' TEXT," + // 28: iconUrl
                    "'IMAGE_URL' TEXT," + // 29: imageUrl
                    "'UPDATE_INFO' TEXT," + // 30: updateInfo
                    "'LOCKED' INTEGER," + // 31: locked
                    "'IS_NEW' INTEGER," + // 32: isNew
                    "'HOT' INTEGER," + // 33: hot
                    "'NOT_SUPPORT' TEXT," + // 34: notSupport
                    "'MARK1' TEXT," + // 35: mark1
                    "'MARK2' TEXT," + // 36: mark2
                    "'MARK3' TEXT," + // 37: mark3
                    "'MARK4' TEXT," + // 38: mark4
                    "'POSITION' INTEGER DEFAULT -1," + // 39: position
                    "'HAS_USED' INTEGER DEFAULT 0," + // 40: hasUsed
                    "'OFFLINE_SHOT' TEXT DEFAULT '');"); // 41: offlineShot
        }
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SCREEN_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ScreenInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        Boolean local = entity.getLocal();
        if (local != null) {
            stmt.bindLong(4, local ? 1l : 0l);
        }

        Boolean sortable = entity.getSortable();
        if (sortable != null) {
            stmt.bindLong(5, sortable ? 1l : 0l);
        }

        Boolean removable = entity.getRemovable();
        if (removable != null) {
            stmt.bindLong(6, removable ? 1l : 0l);
        }

        String pluginUrl = entity.getPluginUrl();
        if (pluginUrl != null) {
            stmt.bindString(7, pluginUrl);
        }

        Integer pluginId = entity.getPluginId();
        if (pluginId != null) {
            stmt.bindLong(8, pluginId);
        }

        String pluginPath = entity.getPluginPath();
        if (pluginPath != null) {
            stmt.bindString(9, pluginPath);
        }

        String pluginType = entity.getPluginType();
        if (pluginType != null) {
            stmt.bindString(10, pluginType);
        }

        String pluginSize = entity.getPluginSize();
        if (pluginSize != null) {
            stmt.bindString(11, pluginSize);
        }

        String pluginState = entity.getPluginState();
        if (pluginState != null) {
            stmt.bindString(12, pluginState);
        }

        String updateType = entity.getUpdateType();
        if (updateType != null) {
            stmt.bindString(13, updateType);
        }

        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(14, versionName);
        }

        Integer screenOrder = entity.getScreenOrder();
        if (screenOrder != null) {
            stmt.bindLong(15, screenOrder);
        }

        String screenTag = entity.getScreenTag();
        if (screenTag != null) {
            stmt.bindString(16, screenTag);
        }

        String dependModel = entity.getDependModel();
        if (dependModel != null) {
            stmt.bindString(17, dependModel);
        }

        String versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindString(18, versionCode);
        }

        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(19, fileName);
        }

        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(20, packageName);
        }

        String tabName = entity.getTabName();
        if (tabName != null) {
            stmt.bindString(21, tabName);
        }

        String baseVersion = entity.getBaseVersion();
        if (baseVersion != null) {
            stmt.bindString(22, baseVersion);
        }

        String updateVersionCode = entity.getUpdateVersionCode();
        if (updateVersionCode != null) {
            stmt.bindString(23, updateVersionCode);
        }

        Boolean showOnTab = entity.getShowOnTab();
        if (showOnTab != null) {
            stmt.bindLong(24, showOnTab ? 1l: 0l);
        }

        String fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindString(25, fileSize);
        }

        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(26, md5);
        }

        String tagType = entity.getTagType();
        if (tagType != null) {
            stmt.bindString(27, tagType);
        }

        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(28, describe);
        }

        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(29, iconUrl);
        }

        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(30, imageUrl);
        }

        String updateInfo = entity.getUpdateInfo();
        if (updateInfo != null) {
            stmt.bindString(31, updateInfo);
        }

        Boolean locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(32, locked ? 1l: 0l);
        }

        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(33, isNew ? 1l: 0l);
        }

        Integer hot = entity.getHot();
        if (hot != null) {
            stmt.bindLong(34, hot);
        }

        String notSupport = entity.getNotSupport();
        if (notSupport != null) {
            stmt.bindString(35, notSupport);
        }

        String mark1 = entity.getMark1();
        if (mark1 != null) {
            stmt.bindString(36, mark1);
        }

        String mark2 = entity.getMark2();
        if (mark2 != null) {
            stmt.bindString(37, mark2);
        }

        String mark3 = entity.getMark3();
        if (mark3 != null) {
            stmt.bindString(38, mark3);
        }

        String mark4 = entity.getMark4();
        if (mark4 != null) {
            stmt.bindString(39, mark4);
        }

        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(40, position);
        }

        Boolean hasUsed = entity.getHasUsed();
        if (hasUsed != null) {
            stmt.bindLong(41, hasUsed ? 1l: 0l);
        }
 
        String offlineShot = entity.getOfflineShot();
        if (offlineShot != null) {
            stmt.bindString(42, offlineShot);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ScreenInfo readEntity(Cursor cursor, int offset) {
        ScreenInfo entity = new ScreenInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // local
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // sortable
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // removable
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pluginUrl
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // pluginId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pluginPath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pluginType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pluginSize
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pluginState
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // updateType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // versionName
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // screenOrder
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // screenTag
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // dependModel
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // versionCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // fileName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // packageName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tabName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // baseVersion
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // updateVersionCode
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // showOnTab
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // fileSize
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // md5
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // tagType
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // describe
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // iconUrl
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // imageUrl
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // updateInfo
            cursor.isNull(offset + 31) ? null : cursor.getShort(offset + 31) != 0, // locked
            cursor.isNull(offset + 32) ? null : cursor.getShort(offset + 32) != 0, // isNew
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // hot
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // notSupport
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // mark1
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // mark2
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // mark3
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // mark4
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // position
            cursor.isNull(offset + 40) ? null : cursor.getShort(offset + 40) != 0, // hasUsed
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41) // offlineShot
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ScreenInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocal(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setSortable(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setRemovable(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setPluginUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPluginId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPluginPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPluginType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPluginSize(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPluginState(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdateType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVersionName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setScreenOrder(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setScreenTag(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDependModel(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVersionCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFileName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPackageName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTabName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBaseVersion(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUpdateVersionCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setShowOnTab(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setFileSize(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setMd5(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTagType(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDescribe(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setIconUrl(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setImageUrl(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setUpdateInfo(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setLocked(cursor.isNull(offset + 31) ? null : cursor.getShort(offset + 31) != 0);
        entity.setIsNew(cursor.isNull(offset + 32) ? null : cursor.getShort(offset + 32) != 0);
        entity.setHot(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setNotSupport(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setMark1(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setMark2(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setMark3(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setMark4(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setPosition(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setHasUsed(cursor.isNull(offset + 40) ? null : cursor.getShort(offset + 40) != 0);
        entity.setOfflineShot(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ScreenInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ScreenInfo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
